{"version":3,"sources":["description/main-icon-dark.svg","components/Accueil/Accueil.js","components/NavBar/NavBar.js","components/MainPage/MainPage.js","App.js","utils/hooks.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","callBack","theme","className","onClick","src","logoDark","alt","NavBar","buttons","useState","burgerOpen","setBurgerOpen","map","value","index","role","key","fa","content","MainPage","props","onClose","state","window","addEventListener","this","removeEventListener","_getButtons","React","Component","App","open","setState","localStorage","getItem","matchMedia","matches","mode","setMode","useEffect","mediaQuery","onMediaChange","addListener","setItem","removeListener","useDarkMode","counterSlice","createSlice","name","initialState","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92c1acaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-icon-dark.7a3731cb.svg\";","import React from \"react\";\r\nimport logoDark from \"../../description/main-icon-dark.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil({ callBack, theme }) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect clickable\" onClick={callBack}>\r\n            <img src={logoDark} className=\"App-logo\" alt=\"logo\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n\r\n","import React, { useState } from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    const [burgerOpen, setBurgerOpen] = useState(true);\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"hamburger\" onClick={() => {setBurgerOpen(!burgerOpen)}}>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n            </div>\r\n            <div className={\"nav-buttons \" + (burgerOpen? 'open' : '')}>\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div role=\"button\" key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./MainPage.css\";\r\n\r\nimport NavBar from \"../NavBar/NavBar.js\";\r\n\r\nclass MainPage extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        window.addEventListener('beforeunload', this.onClose);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onClose);\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    onClose = () => {}\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Generates the buttons to be given to the top nav-bar.\r\n     *\r\n     * @returns {Array} buttons\r\n     */\r\n    _getButtons() {\r\n        const buttons = [\r\n            {\r\n                className: \"green\",\r\n                fa: \"\",\r\n                content: \"About\",\r\n                callBack: () => {},\r\n            },\r\n        ];\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar buttons={this._getButtons()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default MainPage;","import React, { useState } from \"react\";\r\nimport { useDarkMode } from \"./utils/hooks.js\";\r\nimport Accueil from \"./components/Accueil/Accueil.js\";\r\nimport MainPage from \"./components/MainPage/MainPage.js\";\r\nimport \"./App.css\";\r\n\r\nfunction App(props) {\r\n    const [state, setState] = useState({ open: false });\r\n    const [mode, setMode] = useDarkMode();\r\n\r\n    function openApp() {\r\n        setState({ open: true });\r\n    }\r\n\r\n    return (\r\n        <div className={`page ${mode}`}>\r\n            {state.open ? (\r\n                <MainPage/>\r\n            ) : (\r\n                <div className=\"frame accueil-wrapper\" >\r\n                    <div role='button' className='light-icon-wrapper clickable noselect' onClick={() => setMode(mode === 'light' ? 'dark' : 'light')}>\r\n                    <i className={'light-icon fa ' + (mode === 'light' ? 'fa-sun-o' : 'fa-moon-o')}></i>\r\n                    </div>\r\n                    <Accueil callBack={openApp} theme={mode}/>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\n\r\nexport function useDarkMode() {\r\n    const preferDarkMedia = \"(prefers-color-scheme: dark)\";\r\n    const [mode, setMode] = React.useState(() => {\r\n        return (\r\n            window.localStorage.getItem(\"color-scheme-option\") ||\r\n            (window.matchMedia(preferDarkMedia).matches ? \"dark\" : \"light\")\r\n        );\r\n    });\r\n    React.useEffect(() => {\r\n        const mediaQuery = window.matchMedia(preferDarkMedia);\r\n        const onMediaChange = () =>\r\n            setMode(mediaQuery.matches ? \"dark\" : \"light\");\r\n        mediaQuery.addListener(onMediaChange);\r\n        window.localStorage.setItem(\"color-scheme-option\", mode);\r\n        return () => mediaQuery.removeListener(onMediaChange);\r\n    }, [mode]);\r\n\r\n    return [mode, setMode];\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}